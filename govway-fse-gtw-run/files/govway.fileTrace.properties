# Topic
topic.erogazioni=request
topic.fruizioni=request

# Topic personalizzazione
# sintassi: log.topic.<erogazioni/fruizioni>.<nomeTopic>.<nomeProprietà>=<valoreProprietà>
# Di seguito le proprietà utilizzabili:
# - requestSent (true/false): se abilitata il topic verrà invocato solamente se GovWay è riuscito a spedire la richiesta verso il backend
# - inRequestContentDefined (true/false): se abilitata il topic verrà invocato se la richiesta in ingresso possiede un payload http
# - outRequestContentDefined (true/false): se abilitata il topic verrà invocato se la richiesta in uscita possiede un payload http
# - inResponseContentDefined (true/false): se abilitata il topic verrà invocato se la risposta in ingresso possiede un payload http
# - inResponseContentDefined (true/false): se abilitata il topic verrà invocato se la risposta in uscita possiede un payload http

# Il topic delle fruizioni deve essere invocato solamente se la richiesta è stata inoltrata al backend
topic.fruizioni.request.requestSent=true


# *** LOG4J ***

# Log4j2 Configuration File
log.config.file=govway.fileTrace.log4j2.properties

# trace/debug/info/warn/error
log.severity=info

# Category per ogni topic delle erogazioni
# sintassi: log.topic.erogazioni.<nomeTopic>=<categoryLog4j2>
category.topic.erogazioni.request=fileTrace.request
# Category per ogni topic delle fruizioni
# sintassi: log.topic.fruizioni.<nomeTopic>=<categoryLog4j2>
category.topic.fruizioni.request=fileTrace.request



# *** FORMAT ***

# Escape dei caratteri speciali
# sintassi: format.escape.<CHAR>=<CHAR_ESCAPED>
# Per indicare i caratteri '=' e '\' usare l'escape '\' nel properties. 
# Ad esempio per fare l'escape del carattere '=':
# format.escape.\==\\\=
format.escape."=\\"

# Formato degli headers
#format.headers.separator=,
#format.headers.header.prefix=
#format.headers.header.suffix=
#format.headers.header.separator=

# Indicazione di una white list o black list che consente di filtrare gli headers HTTP restituiti dai metodi 'getInRequestHeaders', 'getOutRequestHeaders', 'getInResponseHeaders', 'getOutResponseHeaders'
# NOTA: configurare solamente una delle due liste poichè, se indicate entrambe, la white list sovrascrive quanto indicato nella black lista.
#format.header.whiteList=FSE-JWT-Signature
format.header.blackList=Authorization,X-Security-Token,FSE-JWT-Signature


# Proprietà
# sintassi: format.property.<position>.<nomeProperty>=...
# Le proprietà verranno risolte in ordine lessicografico di posizionamento; l'ordine è importante se si hanno proprietà che sono definite tramite altre proprietà

# Informazioni comuni
format.property.000a.commons.server.ip=${log:hostAddress}
format.property.000b.commons.server.hostname=${log:hostName}
format.property.000c.commons.server.clusterId=${log:clusterId}
format.property.000d.commons.server.port=8443
format.property.000e.commons.server.encoding=${log:javaProperty(file.encoding)}
# poichè è stato richiesto: 'Se i campi w-wt-* non sono valorizzati, non mandarli', per il "x-wt-user definiamo un default 'undefined' poichè non riusciamo a inviarlo SOLO SE ..."
format.property.000f.commons.user=${log:tokenModIAuditPayloadClaim(userID,undefined)}

# Identificativo di transazione e applicativo
#format.property.001a.commons.govway-id=A_govway-${log:profile}
# Modifica del 16/01/2025
format.property.001a.commons.govway-id=GOVWAY-FSE-${log:apiProperty(CodiceServizio,MODI)}
format.property.001b.commons.id="${log:property(commons.server.clusterId)}"|"${log:transactionId}"|"${log:property(commons.govway-id)}"

# Data composta da due campi: Request Timestamp (UTC) e Local Time zone (ISO8601)
format.property.002a.commons.dataRichiestaErogazione="${log:inRequestDateZ(yyyy-MM-dd HH:mm:ss:SSS z,Europe/Rome)}"
format.property.002d.commons.dataRichiestaFruizione="${log:outRequestDateZ(yyyy-MM-dd HH:mm:ss:SSS z,Europe/Rome)}"

# Remote IP - Protocol - Method
format.property.004a.commons.remoteIP-protocol-method="${log:requesterIP}"|"HTTP/1.1"|"${log:httpMethod}"

# URL Invocazione
format.property.005a.commons.urlErogazione="https://${log:property(commons.server.hostname)}:${log:property(commons.server.port)}${log:inURL}"
format.property.005b.commons.urlFruizione="${log:outURL}"

# Status Code
format.property.006a.commons.httpStatusErogazione="${log:outHttpStatus}"
format.property.006b.commons.httpStatusFruizione="${log:inHttpStatus}"

# Elapsed Time espressi in microsecondi
format.property.007a.commons.elapsedTimeErogazione="${log:elapsedTimeUs}"|"${log:elapsedTimeMs}"
format.property.007b.commons.elapsedTimeFruizione="${log:apiElapsedTimeUs}"|"${log:apiElapsedTimeMs}"


# Campi Custom 'Liberi'
# NOTA il requester potrebbe contenere ';' per questo motivo lo si codifica in base64
# NOTA2 il dettaglio errore può contenere ';', per questo motivo lo si codifica in base64
format.property.100a.custom.govway=versione_api = ${log:apiVersion}; api = ${log:api}; operazione = ${log:action}; erogatore = ${log:provider}; soggetto_fruitore = ${log:sender}; applicativo_fruitore = ${log:application}; token_client_id = ${log:tokenClientId}; pdnd_organization = ${log:pdndOrganizationName}; id_transazione = ${log:transactionId}; id_messaggio_richiesta = ${log:requestId}; id_messaggio_risposta = ${log:responseId}; id_collaborazione = ${log:correlationId}; id_applicativo = ${log:applicationId}; esito = ${log:result}; codice_esito = ${log:resultCode}; stato = ${log:resultClass}; error_detail_base64 = ${logBase64:errorDetail}; tls_client_cert_base64 = ${logBase64:clientCertificateSubjectDN}; richiedente_base64 = ${logBase64:requester};

# Campi Custom da utilizzare per il log degli header e per la registrazione del file body response
#x-wt-ip-app-server: IP Application Server
#x-wt-hostname-app-server: Hostname Application Server
#x-wt-server-encoding: 
#x-wt-app-server-port: Porta Application Server
#x-wt-user: Utente autenticato 
#x-wt-id-session: Identificativo  di sessione
format.property.101a.custom.headers="x-wt-ip-app-server:${log:property(commons.server.ip)}"|"x-wt-hostname-app-server:${log:property(commons.server.hostname)}"|"x-wt-server-encoding:${log:property(commons.server.encoding)}"|"x-wt-app-server-port:${log:property(commons.server.port)}"|"x-wt-user:${log:property(commons.user)}"|"x-wt-campi-liberi:${log:property(custom.govway)}"


# Headers per request
# erogazione
format.property.200a.headers.erogazione.richiesta.standard=${log:inRequestHeaders(|,:,",")}
format.property.200b.headers.erogazione.richiesta=${log:propertyUnion("\"HEADERS\"",headers.erogazione.richiesta.standard,|)}
# fruizione
format.property.200c.headers.fruizione.richiesta.standard=${log:outRequestHeaders(|,:,",")}
format.property.200d.headers.fruizione.richiesta=${log:propertyUnion("\"HEADERS\"",headers.fruizione.richiesta.standard,|)}

# Headers per response
# erogazione
format.property.201a.headers.erogazione.risposta.standard=${log:outResponseHeaders(|,:,",")}
format.property.201b.headers.erogazione.risposta.standard-custom=${log:propertyUnion(headers.erogazione.risposta.standard,custom.headers,|)}
format.property.201c.headers.erogazione.risposta=${log:propertyUnion("\"HEADERS\"",headers.erogazione.risposta.standard-custom,|)}
# fruizione
format.property.201e.headers.fruizione.risposta.standard=${log:inResponseHeaders(|,:,",")}
format.property.201f.headers.fruizione.risposta.standard-custom=${log:propertyUnion(headers.fruizione.risposta.standard,custom.headers,|)}
format.property.201g.headers.fruizione.risposta=${log:propertyUnion("\"HEADERS\"",headers.fruizione.risposta.standard-custom,|)}

# EROGAZIONI-RICHIESTA
format.property.999a.erogazioni.request=${log:property(commons.dataRichiestaErogazione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlErogazione)}|${log:property(headers.erogazione.richiesta)}
format.property.999b.erogazioni.requestBody=Cg==
#No payload tracciato, uso Cg== che corrisponde a stringa vuota 'echo "" | base64'
#${logBase64:inRequestContent}

# EROGAZIONI-RISPOSTA
format.property.999c.erogazioni.response=${log:property(commons.httpStatusErogazione)}|${log:property(commons.elapsedTimeErogazione)}|"${log:inRequestSize}"|"${log:outResponseSize}"|${log:property(headers.erogazione.risposta)}
format.property.999d.erogazioni.responseBody=Cg==
#No payload tracciato, uso Cg== che corrisponde a stringa vuota 'echo "" | base64'
#${logBase64:outResponseContent}

# FRUIZIONE-RICHIESTA
format.property.999e.fruizioni.request=${log:property(commons.dataRichiestaFruizione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlFruizione)}|${log:property(headers.fruizione.richiesta)}
format.property.999f.fruizioni.requestBody=Cg==
#No payload tracciato, uso Cg== che corrisponde a stringa vuota 'echo "" | base64'
#${logBase64:outRequestContent}

# FRUIZIONE-RISPOSTA
format.property.999g.fruizioni.response=${log:property(commons.httpStatusFruizione)}|${log:property(commons.elapsedTimeFruizione)}|"${log:outRequestSize}"|"${log:inResponseSize}"|${log:property(headers.fruizione.risposta)}
format.property.999h.fruizioni.responseBody=Cg==
#No payload tracciato, uso Cg== che corrisponde a stringa vuota 'echo "" | base64'
#${logBase64:inResponseContent}



# Informazioni da cifrare

format.property.501.erogazioni.tokenFSE=${log:inRequestHeader(FSE-JWT-Signature)}






# Formato del log

# EROGAZIONI
format.topic.erogazioni.request=${log:property(commons.dataRichiestaErogazione)}|${log:property(commons.id)}|"**REQUEST**"|${log:property(erogazioni.request)}|"**REQUEST_FSE_TOKEN**"|${log:property(erogazioni.tokenFSE)}|"**REQUEST_BODY**"|${log:property(erogazioni.requestBody)}|"**RESPONSE**"|${log:property(erogazioni.response)}|"**RESPONSE_BODY**"|${log:property(erogazioni.responseBody)}


# FRUIZIONE
format.topic.fruizioni.request=${log:property(commons.dataRichiestaFruizione)}|${log:property(commons.id)}|"**REQUEST**"|${log:property(fruizioni.request)}|"**REQUEST_BODY**"|${log:property(fruizioni.requestBody)}|"**RESPONSE**"|${log:property(fruizioni.response)}|"**RESPONSE_BODY**"|${log:property(erogazioni.responseBody)}



